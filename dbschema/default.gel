using extension auth;

module default {
    global current_user := (
        assert_single((
            select User
            filter .identity = global ext::auth::ClientTokenIdentity
        ))
    );

    global backend_url: str {
        default:= "http://localhost:8000";
    }

    global vercel_bypass: str {
        default:= "";
    }

    type ToolInvocation {
        required state: str;
        required tool_call_id: str;
        required tool_name: str;
        required args: json;
        result: json;

        part := .<tool_invocation[is Part];

        access policy owner_has_full_access
            allow all
        using (assert_single(.part).message.chat.owner ?= global current_user);
    }

    type Part {
        required message: Message;
        required type_: str;
        text: str;
        reasoning: str;
        tool_invocation: ToolInvocation;
        source_: str;

        access policy owner_has_full_access
            allow all
        using (.message.chat.owner ?= global current_user);
    }

    type Message {
        required chat: Chat;
        required role_: str;
        created_at: datetime {
            default:= datetime_current();
        };
        content: str;
        annotations: json;

        multi parts := .<message[is Part];

        is_evicted: bool {
            default:= false;
        };

        access policy owner_has_full_access
            allow all
        using (.chat.owner ?= global current_user);
    }

    type Chat {
        required title: str {
            default:= "New Chat";
        };
        required created_at: datetime {
            default:= datetime_current();
        };

        multi archive := .<chat[is Message];
        multi history := (select .archive filter not .is_evicted);

        required owner: User;

        access policy owner_has_full_access
            allow all
        using (.owner ?= global current_user);


        # trigger post_foo after insert, update for each do (
        #     with 
        #         endpoint := assert_exists(global backend_url) ++ "/api/agent/foo",
        #         headers := [
        #             ('x-vercel-protection-bypass', assert_exists(global vercel_bypass)),
        #             ('Content-Type', 'application/json')
        #         ],
        #     select net::http::schedule_request(
        #         endpoint,
        #         method := net::http::Method.POST,
        #         headers := headers,
        #         body := to_bytes(
        #             to_str(
        #                 json_object_pack(
        #                     {
        #                         ("chat_id", <json>__new__.id),
        #                         ("content", <json>__new__.content),
        #                         ("llm_role", <json>__new__.role_)
        #                     }
        #                 )
        #             )
        #         )
        #     )
        # );
    }

    type User {
        required identity: ext::auth::Identity;
    }
}
